import numpy as np
import math
import time
# from xarm.wrapper import XArmAPI
import SASutils
import random

# mapping = {'H1': 1, 'M1': 8, 'S1': 2}

types = "HMST" #HMST
div = len(types)
per = 4
mapping = {f'{types[i // per]}{i % per + 1}': (i + 1) for i in range(div * per)}
# Autogenerated -> {'H1': 1, 'H2': 2, 'H3': 3, 'H4': 4, 'M1': 5, 'M2': 6, 'M3': 7, 'M4': 8, 'S1': 9, 'S2': 10, 'S3': 11, 'S4': 12}


import random

def create_points2_array(time_points):
    # Define fixed positions
    handoff = [[-11,45,-4,105,0,-40,0],5,0]
    handoffW = [[-11,45,-4,105,0,-40,0],3,0]
    dropP = [[78.6,43,10,105,0,-40,0],5,0]
    dropPafter = [[78.6,43,10,105,0,15,0],1,0]
    pose1 = [105,36,3,130,-5,14,0]
    pose2 = [76,60,3,109,-5,30,0]
    pose3 = [60,20,3,130,-5,-30,0]
    pose4 = [90,0,0,90,0,0,0]
    poses = [pose1, pose2, pose3, pose4]
    
    points2 = []
    current_time = 0
    last_pose = None  # Keep track of the last used pose
    
    for target_time in time_points:
        # Calculate when handoff sequence should start to end at target_time
        handoff_start_time = target_time - handoff[1] 
        
        # Fill time until handoff sequence with random poses
        while current_time < handoff_start_time:
            # Filter out the last used pose
            available_poses = [pose for pose in poses if pose != last_pose]
            # Choose random pose from available poses
            random_pose = random.choice(available_poses)
            last_pose = random_pose 
            
            # Minimum 3 seconds, random up to remaining time or 6 seconds
            duration = min(
                max(3, random.randint(3, 6)),
                handoff_start_time - current_time
            )
            points2.append([random_pose, duration, 0])
            current_time += duration
            
        # Add handoff sequence
        points2.extend([
            handoff,
            handoffW,
            dropP,
            dropPafter
        ])
        current_time += handoff[1] +  handoffW[1] + dropP[1] + dropPafter[1]
        last_pose = None 
    
    return points2

def main(xarm):
    
    
    for stim in range(2):
        print("stim", stim)
        time1 = [7, 28, 46, 59, 74, 89, 105, 116]
        time2 = [7, 22, 36, 52, 69, 80, 92, 108]
        time_points = [time1, time2]
        # time_points = [time2, time1]
        move = create_points2_array(time_points[stim])
        for i, point in enumerate(move):
            print(f"Point {i}: {point}")
        
        # for round in range(3):
        #     print("round", round)

            input("start the round")
                # demos = list(mapping)
            xarm.p2pTraj(move)
            count += 1
        



if __name__ == "__main__":
    simulation = True
    xarm = SASutils.robotsUtils("192.168.1.226",simulation)
    if not simulation:
        xarm.setupBot()
    input("press enter when robot stops moving")
    main(xarm)

    # sound = -1
    # while sound:
    #     sound = int(input("input sound ID to move: "))
    #     t = 5
    #     if not sound:
    #         break
    #     points = [ [[586,17.9,689,179.6,-71,2],3,0], [[-57,571,456,-160,-39,88],t,sound],[[586,17.9,689,179.6,-71,2],t,sound]] #0,17.6,0,115,0,26  92,11,5,30,30,-18
    #     xarm.p2pTraj(points)
    # print(trajectory[0])  